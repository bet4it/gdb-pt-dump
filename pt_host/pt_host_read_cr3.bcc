
#include <linux/sched.h>
#include <linux/mm.h>
#include <linux/pid.h>

BPF_ARRAY(out_cr3, u64, 1);

KFUNC_PROBE(pidfd_create, struct pid *pid, unsigned int flags) {
    // Retrieve the passed arguments from userspace
    const u32 pt_host_pid = $PT_HOST_PID;

    const u32 target_pid = $TARGET_PID;

    // Check if this trace happened due to an invocation from the pt_host script
    struct task_struct *current_task = (struct task_struct *)bpf_get_current_task();
    if (current_task == NULL) {
        return 0;
    }

    u32 current_task_pid = 0;
    if (bpf_probe_read(&current_task_pid, sizeof(current_task_pid), &(current_task->pid)) < 0) {
        return 0;
    }
    if (current_task_pid != pt_host_pid) {
        return 0;
    }

    struct hlist_node *first_task_node = NULL;
    if (bpf_probe_read(&first_task_node, sizeof(first_task_node), &(pid->tasks[PIDTYPE_TGID].first)) < 0) {
        return 0;
    }
    struct task_struct *target_task = hlist_entry(first_task_node, struct task_struct, pid_links[PIDTYPE_TGID]);

    // Get the task_struct of the target process
    if (!target_task) {
        return 0;
    }

    struct mm_struct *mm = NULL;
    if (bpf_probe_read(&mm, sizeof(mm), &(target_task->mm)) < 0) {
        return 0;
    }

    unsigned long cr3 = 0;
    if (bpf_probe_read(&cr3, sizeof(cr3), &(mm->pgd)) < 0) {
        return 0;
    }

    unsigned long page_offset_base = 0;
    if (bpf_probe_read(&page_offset_base, 8, (void *)$PAGE_OFFSET_BASE) < 0) {
        return 0;
    }
    unsigned long cr3_phys_address = cr3 - page_offset_base;
    u32 index = 0;
    u64 *ptr = out_cr3.lookup(&index);
    if (!ptr) {
        return 0;
    }
    *ptr = cr3_phys_address;
    bpf_trace_printk("Done\n");
    return 0;
}
